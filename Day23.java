1. Boats To Save People

class Solution {
    public int numRescueBoats(int[] people, int limit) {
        int boats=0;
        Arrays.sort(people);
        int i=0,j=people.length-1;
        while(i<=j){
            if((people[j]+people[i])<=limit){
                i++;
            }
            j--;
            boats++;
        }
        return boats;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Delete Node in a Linked List

    /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        node.val=node.next.val;
        node.next=node.next.next;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
