1. Longest Uncommon Subsequence

class Solution {
    public int findLUSlength(String a, String b) {
        if(a.equals(b)) return -1;
        if(a.length()>b.length()){
            return a.length();
        }else{
            return b.length();
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Max Consecutive Ones

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int m=0,j=-1,i=0;
        for(;i<nums.length;i++){
            if(nums[i]==0){
                m=Math.max(m,i-j-1);
                j=i;
            }
        }
        return Math.max(m,i-j-1);
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Detect Capital

class Solution {
    public boolean detectCapitalUse(String word) {
        int caps=0,low=0,first=0;
        for(char ch:word.toCharArray()){
            if(ch>=65 && ch<=90){
                caps++;
                if(first==0) first=1;
            }
            else{
                low++;
                if(first==0) first=2;
            }
        }
        if(caps==0 || low==0 || first==1 && caps==1) return true;
        else return false;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
